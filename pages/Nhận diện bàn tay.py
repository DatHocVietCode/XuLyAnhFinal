import random
import time

import cv2
import joblib
import mediapipe as mp
import numpy as np
import streamlit as st

# ============ C·∫•u h√¨nh giao di·ªán Streamlit ============
st.markdown(
    """
    <style>
    .stApp {
        background-image: url("https://moewalls.com/wp-content/uploads/2021/11/bliss-tree-thumb-728x410.jpg");
        background-size: cover;
        background-position: center;
        color: black;
    }
    .title {
        color: white;
        font-size: 3em;
        text-align: center;
        font-weight: bold;
        margin-bottom: 0.5em;
        text-shadow: 2px 2px 5px black;
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.title("‚úã K√©o - B√∫a - Bao ‚úä")
st.write("üëÜ B·∫≠t webcam v√† ch∆°i game tr·ª±c ti·∫øp v·ªõi m√°y t√≠nh!")

# ============ Kh·ªüi t·∫°o Mediapipe ============
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

# ============ Kh·ªüi t·∫°o webcam ============
cap = cv2.VideoCapture(0)
frame_window = st.image([])
result_text = st.empty()
user_choice_text = st.empty()
computer_choice_text = st.empty()
score_text = st.empty()

# ============ T·∫£i m√¥ h√¨nh nh·∫≠n di·ªán ============
model_path = 'NhanDienBanTay/hand_model.pkl'
try:
    model, scaler = joblib.load(model_path)
    st.success("üéâ Model loaded successfully!")
except FileNotFoundError:
    st.error("‚ùå Kh√¥ng t√¨m th·∫•y hand_model.pkl. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n!")
    cap.release()
    cv2.destroyAllWindows()
    st.stop()

# ============ L·ª±a ch·ªçn ng·∫´u nhi√™n c·ªßa m√°y ============
choices = ['keo', 'bua', 'bao']

# ============ Bi·∫øn ƒëi·ªÅu khi·ªÉn ============
pause_prediction = False
last_update_time = 0
user_score, computer_score, draw_score = 0, 0, 0
user_choice, computer_choice = None, None
confirmed_choice = None
start_confirmation_time = None

# ============ H√†m x√°c ƒë·ªãnh k·∫øt qu·∫£ ============
def get_winner(user, computer):
    global user_score, computer_score, draw_score
    if user == computer:
        draw_score += 1
        return "Draw!"
    elif (user == 'keo' and computer == 'bao') or (user == 'bua' and computer == 'keo') or (user == 'bao' and computer == 'bua'):
        user_score += 1
        return "You win!"
    else:
        computer_score += 1
        return "You loose!"

# ============ V√≤ng l·∫∑p ch∆°i game ============
with mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.5, min_tracking_confidence=0.5) as hands:
    while cap.isOpened():
        success, image = cap.read()
        if not success:
            st.error("‚ùåCan't open camera")
            break
        
        # X·ª≠ l√Ω h√¨nh ·∫£nh
        image = cv2.flip(image, 1)
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        results = hands.process(image_rgb)

        if not pause_prediction:
            # D·ª± ƒëo√°n b√†n tay
            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    mp_drawing.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)

                    # L·∫•y t·ªça ƒë·ªô b√†n tay
                    landmarks = [coord for landmark in hand_landmarks.landmark for coord in (landmark.x, landmark.y, landmark.z)]
                    landmarks = np.array(landmarks).reshape(1, -1)

                    if landmarks.shape[1] == scaler.mean_.shape[0]:
                        landmarks = scaler.transform(landmarks)
                        try:
                            prediction = model.predict(landmarks)
                            current_choice = prediction[0]
                            
                            # Ki·ªÉm tra l·ª±a ch·ªçn ·ªïn ƒë·ªãnh sau 1.5 gi√¢y
                            if confirmed_choice is None or current_choice != confirmed_choice:
                                confirmed_choice = current_choice
                                start_confirmation_time = time.time()
                            elif time.time() - start_confirmation_time >= 1.5:
                                user_choice = confirmed_choice
                        except Exception as e:
                            st.error(f"L·ªói d·ª± ƒëo√°n: {e}")
            
            # M√°y t√≠nh ch·ªçn ng·∫´u nhi√™n v√† x·ª≠ l√Ω sau khi x√°c nh·∫≠n xong
            if user_choice:
                computer_choice = random.choice(choices)

                # Hi·ªÉn th·ªã th√¥ng tin l√™n Streamlit
                user_choice_text.text(f"‚úã B·∫°n ch·ªçn: **{user_choice}**")
                computer_choice_text.text(f"üíª M√°y ch·ªçn: **{computer_choice}**")
                result_text.text(get_winner(user_choice, computer_choice))
                
                # C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë
                score_text.text(f"üî¥ B·∫°n: {user_score} | üíª M√°y: {computer_score} | ü§ù H√≤a: {draw_score}")

                # T·∫°m d·ª´ng d·ª± ƒëo√°n 5 gi√¢y
                pause_prediction = True
                last_update_time = time.time()
        
         # N·∫øu ƒëang t·∫°m d·ª´ng th√¨ v·∫´n hi·ªÉn th·ªã k·∫øt qu·∫£ l√™n webcam
        if pause_prediction:
            # Hi·ªÉn th·ªã l·ª±a ch·ªçn c·ªßa b·∫°n
            cv2.putText(image, f"Ban: {user_choice}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            
            # Hi·ªÉn th·ªã l·ª±a ch·ªçn c·ªßa m√°y
            cv2.putText(image, f"May: {computer_choice}", (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ (l√πi xu·ªëng m·ªôt d√≤ng n·ªØa ƒë·ªÉ kh√¥ng b·ªã ƒë√®)
            cv2.putText(image, get_winner(user_choice, computer_choice), (10, 110), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)


        # Ki·ªÉm tra n·∫øu ƒë√£ qua 5 gi√¢y th√¨ ti·∫øp t·ª•c nh·∫≠n di·ªán
        if pause_prediction and (time.time() - last_update_time) > 5:
            pause_prediction = False
            result_text.text("")
            user_choice_text.text("")
            computer_choice_text.text("")
            user_choice, computer_choice = None, None
            confirmed_choice = None

        # C·∫≠p nh·∫≠t frame l√™n Streamlit
        frame_window.image(image, channels='BGR')

# Gi·∫£i ph√≥ng t√†i nguy√™n
cap.release()
cv2.destroyAllWindows()
